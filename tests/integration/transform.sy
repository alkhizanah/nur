tester = import("tester.sy")

tester.run("pass-through an empty map", fn () {
    untransformed_map = {}

    transformed_map = transform(untransformed_map, fn (k, v) { return [k, v] })

    return transformed_map == untransformed_map
})

tester.run("pass-through a non-empty map", fn () {
    untransformed_map = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
    }

    transformed_map = transform(untransformed_map, fn (k, v) { return [k, v] })

    return transformed_map == untransformed_map
})

tester.run("apply a simple tranformation to values but not keys", fn () {
    untransformed_map = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
    }

    transformed_map = transform(untransformed_map, fn (k, v) { return [k, v + 1] })

    expected_map = {
        "1": 2,
        "2": 3,
        "3": 4,
        "4": 5,
        "5": 6,
    }

    return transformed_map == expected_map
})

tester.run("apply a simple tranformation to keys but not values", fn () {
    untransformed_map = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
    }

    transformed_map = transform(untransformed_map, fn (k, v) { return [to_string(to_int(k) + 1), v] })
    
    expected_map = {
        "2": 1,
        "3": 2,
        "4": 3,
        "5": 4,
        "6": 5,
    }

    return transformed_map == expected_map
})

tester.run("apply a simple tranformation both keys and values", fn () {
    untransformed_map = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
    }

    transformed_map = transform(untransformed_map, fn (k, v) { return [to_string(to_int(k) + 1), v + 1] })
    
    expected_map = {
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
    }

    return transformed_map == expected_map
})

tester.run("pass-through a non-empty array", fn () {
    untransformed_arr = [1, 2, 3, 4, 5]

    transformed_arr = transform(untransformed_arr, fn (v) { return v })

    return transformed_arr == untransformed_arr
})

tester.run("apply a simple transformation to array's values", fn () {
    untransformed_arr = [1, 2, 3, 4, 5]

    transformed_arr = transform(untransformed_arr, fn (v) { return v + 1 })

    expected_arr = [2, 3, 4, 5, 6]

    return transformed_arr == expected_arr
})

tester.end()

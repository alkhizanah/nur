tester = import("tester.sy")

test_1 = fn () {
    # pass-through filter for an empty map
    unfiltered_map = {}

    filtered_map = filter(unfiltered_map, fn (k, v) { return true })

    return filtered_map == unfiltered_map
}

test_2 = fn () {
    # pass-through filter for non-empty empty map
    unfiltered_map = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
    }

    filtered_map = filter(unfiltered_map, fn (k, v) { return true })

    return filtered_map == unfiltered_map
}

test_3 = fn () {
    # filter a map based on its member values
    unfiltered_map = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
    }

    filtered_map = filter(unfiltered_map, fn (k, v) { return (v % 2) == 0 })

    expected_map = {"2": 2, "4": 4}

    return filtered_map == expected_map
}

test_4 = fn () {
    # pass-through filter for an empty array
    unfiltered_arr = []

    filtered_arr = filter(unfiltered_arr, fn (v) { return true })

    return filtered_arr == unfiltered_arr
}

test_5 = fn () {
    # pass-through filter for non-empty empty array
    unfiltered_arr = [1, 2, 3, 4, 5]

    filtered_arr = filter(unfiltered_arr, fn (v) { return true })

    return filtered_arr == unfiltered_arr
}

test_6 = fn () {
    # a simple filter on a array of integers
    unfiltered_arr = [1, 2, 3, 4, 5]

    filtered_arr = filter(unfiltered_arr, fn (v) { return (v % 2) == 0 })

    expected_arr = [2, 4]

    return filtered_arr == expected_arr
}

test_7 = fn () {
    # pass-through filter applied to a string
    unfiltered_str = "12345"

    filtered_str = filter(unfiltered_str, fn (v) { return true })

    return filtered_str == unfiltered_str
}

test_8 = fn () {
    # a simple filter on a string
    unfiltered_str = "12345"

    expected_str = "24"

    filtered_str = filter(unfiltered_str, fn (v) { return ((to_int(v)) % 2) == 0 })

    return filtered_str == expected_str
}

tester.test([
    test_1,
    test_2,
    test_3,
    test_4,
    test_5,
    test_6,
    test_7,
    test_8,
])
